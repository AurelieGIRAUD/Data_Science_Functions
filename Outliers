# Remove outliers based on quantiles
def cap_data(df):
    for col in df.columns:
        if (((df[col].dtype)=='float64') | ((df[col].dtype)=='int64')):
            percentiles = df[col].quantile([0.01,0.99]).values
            df[col][df[col] <= percentiles[0]] = percentiles[0]
            df[col][df[col] >= percentiles[1]] = percentiles[1]
        else:
            df[col]=df[col]
    return df

final_df=cap_data(df)

# Remove outliers based on 1.5 x IQR
def remove_outliers(df):
    Q1 = df.quantile(0.25)
    Q3 = df.quantile(0.75)
    IQR = Q3 - Q1
    df_out = df[~(((df < (Q1 - 1.3 * IQR)) |(df > (Q3 + 1.3 * IQR))).any(axis=1))] # We reduce a bit the threshold to remove more outliers
    
    return df_out

df_out = tmp.groupby(col).apply(remove_outliers).reset_index(drop=True)

# Remove outliers based on the threshold 3 x SD
df_out = df.set_index(col)

# 1st way
df_out = df_out[df_out.apply(lambda x :(x-x.mean()).abs()<(3*x.std()) ).all(1)]

# 2nd way
df[(np.abs(stats.zscore(df)) < 3).all(axis=1)]
